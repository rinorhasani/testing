name: Deploy to Azure VM (OpenSSH, No Registry, Compose)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

env:
  APP_DIR: /opt/apps/testing

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH key & known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY:  ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_vm
          chmod 600 ~/.ssh/id_vm
          # pin all server keys (ed25519,rsa,ecdsa) into known_hosts
          ssh-keyscan -H -t ed25519,rsa,ecdsa "$SSH_HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          # quick sanity print
          ssh-keygen -lf ~/.ssh/known_hosts || true

      - name: Prepare remote dir
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/id_vm -p "${{ secrets.SSH_PORT || 22 }}" -o StrictHostKeyChecking=yes \
            "$SSH_USER@$SSH_HOST" \
            "sudo mkdir -p '${APP_DIR}' && sudo chown -R \$USER:\$USER '${APP_DIR}' && rm -rf '${APP_DIR}'/*"

      - name: Upload repo (rsync over SSH)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          # keep upload small
          rm -rf .git .github || true
          rsync -az --delete -e "ssh -i ~/.ssh/id_vm -p ${{ secrets.SSH_PORT || 22 }} -o StrictHostKeyChecking=yes" \
            ./ "$SSH_USER@$SSH_HOST:${APP_DIR}/"

      - name: Build & start (Docker Compose if present)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/id_vm -p "${{ secrets.SSH_PORT || 22 }}" -o StrictHostKeyChecking=yes \
            "$SSH_USER@$SSH_HOST" "
              set -e
              if ! command -v docker >/dev/null 2>&1; then
                curl -fsSL https://get.docker.com | sh
                sudo systemctl enable --now docker
              fi
              if ! docker compose version >/dev/null 2>&1; then
                sudo apt-get update -y && sudo apt-get install -y docker-compose-plugin
              fi
              cd '${APP_DIR}'
              [ -f .env ] || { [ -f .env.example ] && cp .env.example .env; } || true
              if [ -f docker-compose.yml ] || [ -f docker-compose.yaml ]; then
                docker compose -p testing down --remove-orphans
                docker compose -p testing up -d --build --remove-orphans
              else
                # fallback single Dockerfile (requires APP_NAME/PUBLIC_PORT/CONTAINER_PORT secrets)
                SHORT_SHA=$(echo '${{ github.sha }}' | cut -c1-7)
                docker build -t '${{ secrets.APP_NAME }}:'\"$SHORT_SHA\" -t '${{ secrets.APP_NAME }}:latest' .
                docker rm -f '${{ secrets.APP_NAME }}' 2>/dev/null || true
                docker run -d --name '${{ secrets.APP_NAME }}' -p '${{ secrets.PUBLIC_PORT }}:${{ secrets.CONTAINER_PORT }}' --restart=always '${{ secrets.APP_NAME }}:latest'
              fi
              docker image prune -f
            "
